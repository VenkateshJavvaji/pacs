import logging
from datetime import datetime
from pydicom.dataset import Dataset
from pynetdicom import AE
from pynetdicom.sop_class import (
    PatientRootQueryRetrieveInformationModelMove,
    PatientRootQueryRetrieveInformationModelFind,
    VerificationSOPClass
)

# -------------------------------
# Logging Setup
# -------------------------------
log_filename = f"dicom_transfer_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
logging.basicConfig(
    filename=log_filename,
    filemode='w',
    format='%(asctime)s %(levelname)s: %(message)s',
    level=logging.DEBUG
)

# Log to console also
console = logging.StreamHandler()
console.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
console.setFormatter(formatter)
logging.getLogger().addHandler(console)


# -------------------------------
# DICOM AE Configuration
# -------------------------------
LOCAL_AET = 'ORTHANC'         # Local AE Title (Orthanc)
FUJI_AET = 'SYNCARD'          # Fuji PACS AE Title
FUJI_IP = '163.246.181.8'     # Fuji PACS IP
FUJI_PORT = 104               # Fuji PACS Port

# Patient to query/move
PATIENT_ID = '083008622'      # Change as needed


# -------------------------------
# Main DICOM Move
# -------------------------------
try:
    # Initialize local AE
    ae = AE(ae_title=LOCAL_AET)

    # Add required presentation contexts
    ae.add_requested_context(VerificationSOPClass)
    ae.add_requested_context(PatientRootQueryRetrieveInformationModelFind)
    ae.add_requested_context(PatientRootQueryRetrieveInformationModelMove)

    logging.info(f"Requesting association with {FUJI_AET} at {FUJI_IP}:{FUJI_PORT}...")

    # Establish association to Fuji PACS
    assoc = ae.associate(FUJI_IP, FUJI_PORT, ae_title=FUJI_AET)

    if assoc.is_established:
        logging.info(f"Association established with {FUJI_AET} ({FUJI_IP}:{FUJI_PORT})")

        # Build C-MOVE dataset at PATIENT level
        move_ds = Dataset()
        move_ds.QueryRetrieveLevel = 'PATIENT'
        move_ds.PatientID = PATIENT_ID

        logging.info(f"Sending C-MOVE request for PatientID={PATIENT_ID} to move to {LOCAL_AET}")

        # Send C-MOVE request
        responses = assoc.send_c_move(
            move_ds,
            LOCAL_AET,  # Destination AE (Orthanc must be listening!)
            PatientRootQueryRetrieveInformationModelMove
        )

        # Process responses
        for (status, identifier) in responses:
            if status:
                logging.info(
                    f"C-MOVE Response: Status=0x{status.Status:04X}, "
                    f"Remaining={getattr(status, 'NumberOfRemainingSuboperations', 'N/A')}, "
                    f"Completed={getattr(status, 'NumberOfCompletedSuboperations', 'N/A')}, "
                    f"Failed={getattr(status, 'NumberOfFailedSuboperations', 'N/A')}, "
                    f"Warning={getattr(status, 'NumberOfWarningSuboperations', 'N/A')}"
                )
            else:
                logging.warning("C-MOVE returned no status")

        assoc.release()
        logging.info("Association released")

    else:
        logging.error(f"Could not establish association with {FUJI_AET} ({FUJI_IP}:{FUJI_PORT})")

except Exception as e:
    logging.exception(f"Error during DICOM transfer: {e}")
