import pydicom
from pydicom.dataset import Dataset
from pynetdicom import AE, evt, debug_logger
from pynetdicom.sop_class import PatientRootQueryRetrieveInformationModelFind, PatientRootQueryRetrieveInformationModelMove

#from pydicom.uid import Verification


# Enable logging
debug_logger()

# Define the DICOM servers
source_ae_title = 'SYNCARD'
source_ip = '163.246.181.8'
source_port = 104

destination_ae_title = 'ORTHANC'
destination_ip = '163.246.4.11'
destination_port = 4242
# Define the patient ID
patient_id = '12345689'

ae = AE()
# Add requested presentation context
ae.add_requested_context('1.2.840.10008.1.1')

# Associate with the peer AE
assoc = ae.associate(destination_ip, destination_port, ae_title=destination_ae_title)

if assoc.is_established:
    # Send a C-ECHO request to the peer
    status = assoc.send_c_echo()

    # Check the status of the response
    if status:
        print('C-ECHO request status: 0x{0:04x}'.format(status.Status))
    else:
        print('Connection timed out, was aborted or received invalid response')

    # Release the association
    assoc.release()
else:
    print('Association with server failed')



# Create an Application Entity
ae = AE()

# Add requested presentation contexts
ae.add_requested_context(PatientRootQueryRetrieveInformationModelFind)
ae.add_requested_context(PatientRootQueryRetrieveInformationModelMove)

# Create a dataset for the C-FIND request
ds = Dataset()
ds.PatientID = patient_id
ds.QueryRetrieveLevel = 'PATIENT'

# Function to handle C-MOVE responses
def handle_move(event):
    return 0x0000
handlers = [(evt.EVT_C_MOVE, handle_move)]

# Perform the C-FIND request to get the study instance UID
assoc = ae.associate(source_ip, source_port, ae_title=source_ae_title)
if assoc.is_established:
    responses = assoc.send_c_find(ds, PatientRootQueryRetrieveInformationModelFind)
    study_instance_uid = None
    for (status, identifier) in responses:
        if status and status.Status == 0xFF00:
            study_instance_uid = identifier.StudyInstanceUID
            break
    assoc.release()
else:
    print("Association with source server failed")

# Perform the C-MOVE request to transfer the study to the destination server
if study_instance_uid:
    ds = Dataset()
    ds.QueryRetrieveLevel = 'STUDY'
    ds.StudyInstanceUID = study_instance_uid

    assoc = ae.associate(source_ip, source_port, ae_title=source_ae_title, evt_handlers=handlers)
    if assoc.is_established:
        assoc.send_c_move(ds, destination_ae_title, PatientRootQueryRetrieveInformationModelMove)
        assoc.release()
    else:
        print("Association with source server failed")
else:
    print("Study instance UID not found")


